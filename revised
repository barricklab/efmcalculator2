from Bio import SeqIO
from Bio.Seq import Seq
import pandas as pd
import time
_start_time = time.time()

filename = "l-6-10_plasmid_bba.fasta"
sequences = SeqIO.parse(filename, 'fasta')
visited_sequences = set()

data = {'Sequence': [], 'Size': [], 'Distance': [], 'Start-Pos': [], 'End-Pos': []}
df = pd.DataFrame(data)

for record in sequences:
    seq_len = len(record.seq)
    seq = record.seq
    writes_to_df = 0

    for i, letter in enumerate(seq):
        for j in range(6, 17, 1):
            if len(seq[i:i + j]) > 6:
                sub_seq = seq[i:i + j]
                rem_seq = seq[i + 1:]

                count = seq.count_overlap(sub_seq)
                if count > 1 and str(sub_seq) not in visited_sequences:
                    distance = 1
                    start_pos = 0
                    rem_start = 0
                    end_pos = 0
                    prv_end_pos = 0
                    df['Sequence'] = df['Sequence'].astype(str)

                    df_filter = df[df['Sequence'].str.contains(str(sub_seq))]
                    if writes_to_df == 0 or df_filter.empty:
                        for q in range(0, count):
                            start_pos = seq.find(sub_seq, rem_start)
                            end_pos = start_pos + len(sub_seq)
                            start_pos += 1
                            distance = start_pos - prv_end_pos

                            print("Sequence = {} : Size = {} : Distance = {} : Start-Pos = {} : End-Pos = {}".format(
                                str(sub_seq), len(sub_seq), distance, start_pos, end_pos))

                            df.loc[str(sub_seq) + '~' + str(start_pos)] = [str(sub_seq), len(sub_seq), distance,
                                                                          start_pos, end_pos]
                            writes_to_df += 1
                            rem_start = start_pos + 1
                            prv_end_pos = end_pos

                        if count <= 1 or str(sub_seq) not in visited_sequences:
                            visited_sequences.add(str(sub_seq))

print(df)
df.sort_values(['Size'], ascending=[True]).to_csv("match_new.csv", index=False)
t_sec = round(time.time() - _start_time)
(t_min, t_sec) = divmod(t_sec, 60)
(t_hour, t_min) = divmod(t_min, 60)
print('\nTime taken: {}hour:{}min:{}sec'.format(t_hour, t_min, t_sec))
